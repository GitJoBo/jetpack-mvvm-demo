apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

// 通用配置
android {

    // 编译源码版本
    compileSdkVersion project.ANDROID_COMPILE_SDK_VERSION as int
    defaultConfig {
        // 最低安装版本
        minSdkVersion ANDROID_MIN_SDK_VERSION as int
        // 目标适配版本
        targetSdkVersion ANDROID_TARGET_SDK_VERSION as int
        versionName ANDROID_VERSION_NAME
        versionCode ANDROID_VERSION_CODE as int
    }

    // 支持 Java JDK 8
    compileOptions {
        targetCompatibility JavaVersion.VERSION_11
        sourceCompatibility JavaVersion.VERSION_11
    }

    buildFeatures{
        //如果您计划在 Kotlin 项目中使用数据绑定，您应该应用 kotlin-kapt 插件。
        dataBinding = true
        //对“viewBinding”的访问超出其访问权限
        viewBinding = true
    }

    kotlinOptions {
//        jvmTarget = '1.8'
        //'compileReleaseJavaWithJavac' task (current target is 11) and 'compileReleaseKotlin' task (current target is 1.8) jvm target compatibility should be set to the
        jvmTarget = '11'
    }

    // 设置存放 so 文件的目录
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    // 可在 Studio 最左侧中的 Build Variants 选项中切换默认的构建类型
    buildTypes {
        // 调试版本
        debug {}
        // 预览版本
        preview {}
        // 正式版本
        release {}
    }

    // 代码警告配置
    lintOptions {
        // 禁用文本硬编码警告
        disable 'HardcodedText'
        // 禁用图片描述警告
        disable 'ContentDescription'

        //TODO https://issuetracker.google.com/issues/214428166问题解决后注释掉，见HomeViewModel
        //Task :app:lintVitalRelease FAILED
        //1 errors, 0 warnings
        //Lint found fatal errors while assembling a release target.
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

afterEvaluate {
    // 前提条件是这个 Module 工程必须是 Library 类型，并且排除名为 umeng 的 Module 工程
    if (android.defaultConfig.applicationId == null && "umeng" != getName()) {
        // 排除 BuildConfig.class
        generateReleaseBuildConfig.enabled = false
        generatePreviewBuildConfig.enabled = false
        generateDebugBuildConfig.enabled = false
    }
}

dependencies {
    // 依赖 libs 目录下所有的 jar 和 aar 包
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')

//    // AndroidX 库：https://github.com/androidx/androidx
//    implementation 'androidx.appcompat:appcompat:1.4.0'
//    // Material 库：https://github.com/material-components/material-components-android
//    implementation 'com.google.android.material:material:1.4.0'
//
//    // Kotlin 协程：https://github.com/Kotlin/kotlinx.coroutines
//    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'
//    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'
//    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
//    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0'
}